# Установка kind

[ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.30.0/kind-linux-amd64

# Донастройка
chmod +x ./kind
sudo mv ./kind /usr/local/bin/kind


# Создание кластера
kind create cluster --image kindest/node:v1.30.13

# При возникновении ошибки ERROR: failed to create cluster: failed to get docker info:  нужно добавить юзера в группу docker командой sudo usermod -aG docker $USER (изменения вступят в силу после ребута)

# Проверка кластера 
kubectl cluster-info --context kind-kind 

# При первом использовании была ошибка с контекстом, исправлял явным указанием конфига:

# export KUBECONFIG=~/.kube/config
# kubectl config get-contexts

# Добавление репозитория эира для helm
helm repo add apache-airflow https://airflow.apache.org
helm repo update

# Создание namespace
export NAMESPACE=airflow
kubectl create namespace $NAMESPACE

# Устанавка Helm chart apache-airflow/airflow с указанным релизом и тестовыми дагами
export RELEASE_NAME=air-release

helm install $RELEASE_NAME apache-airflow/airflow \
  --namespace $NAMESPACE \
  --set-string "env[0].name=AIRFLOW__CORE__LOAD_EXAMPLES" \
  --set-string "env[0].value=True"

# Проброс портов наружу

kubectl port-forward svc/$RELEASE_NAME-api-server 8080:8080 --namespace $NAMESPACE

# ===== KUBERNETES DEPLOYMENT =====
# Развертывание с собственными Docker образами и KubernetesExecutor

# Переход в директорию с манифестами
cd k8s

# Быстрое развертывание
chmod +x deploy.sh
./deploy.sh

# Или ручное развертывание по шагам:
# kubectl apply -f 01-namespace.yaml
# kubectl apply -f 02-configmap.yaml  
# kubectl apply -f 03-secrets.yaml
# kubectl apply -f 04-postgres.yaml
# kubectl apply -f 05-rbac.yaml
# kubectl wait --for=condition=ready pod -l app=postgres -n airflow --timeout=300s
# kubectl apply -f 06-webserver.yaml
# kubectl apply -f 07-scheduler.yaml

# Проверка статуса
kubectl get pods -n airflow

# Доступ к UI через port-forward
kubectl port-forward svc/airflow-webserver 8080:8080 -n airflow

# Логин: admin, Пароль: admin

# Удаление
# ./cleanup.sh