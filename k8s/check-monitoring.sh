#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Airflow

echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Airflow ==="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ namespace..."
if kubectl get namespace airflow &> /dev/null; then
    echo "‚úÖ Namespace 'airflow' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    echo "‚ùå Namespace 'airflow' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤
echo "2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–æ–≤..."
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ                    –ü–û–î–´ AIRFLOW                         ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
kubectl get pods -n airflow -o wide

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "3. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ                   –°–ï–†–í–ò–°–´ AIRFLOW                       ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
kubectl get svc -n airflow

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
echo "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."

components=("airflow-webserver" "airflow-scheduler" "postgres" "prometheus" "grafana")
for component in "${components[@]}"; do
    if kubectl get deployment $component -n airflow &> /dev/null; then
        ready=$(kubectl get deployment $component -n airflow -o jsonpath='{.status.readyReplicas}')
        desired=$(kubectl get deployment $component -n airflow -o jsonpath='{.spec.replicas}')
        if [ "$ready" = "$desired" ] && [ "$ready" != "" ]; then
            echo "‚úÖ $component: –≥–æ—Ç–æ–≤ ($ready/$desired)"
        else
            echo "‚ùå $component: –Ω–µ –≥–æ—Ç–æ–≤ ($ready/$desired)"
        fi
    else
        echo "‚ùì $component: –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DaemonSet (Node Exporter)
echo "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Node Exporter..."
if kubectl get daemonset node-exporter -n airflow &> /dev/null; then
    desired=$(kubectl get daemonset node-exporter -n airflow -o jsonpath='{.status.desiredNumberScheduled}')
    ready=$(kubectl get daemonset node-exporter -n airflow -o jsonpath='{.status.numberReady}')
    echo "‚úÖ Node Exporter: $ready/$desired —É–∑–ª–æ–≤ –≥–æ—Ç–æ–≤—ã"
else
    echo "‚ùå Node Exporter: –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Airflow
if kubectl get svc airflow-webserver -n airflow &> /dev/null; then
    airflow_port=$(kubectl get svc airflow-webserver -n airflow -o jsonpath='{.spec.ports[0].port}')
    echo "üåê Airflow UI: kubectl port-forward svc/airflow-webserver $airflow_port:$airflow_port -n airflow"
    echo "   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:$airflow_port (admin/admin)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana
if kubectl get svc grafana -n airflow &> /dev/null; then
    grafana_port=$(kubectl get svc grafana -n airflow -o jsonpath='{.spec.ports[0].port}')
    echo "üìä Grafana: kubectl port-forward svc/grafana $grafana_port:$grafana_port -n airflow"
    echo "   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:$grafana_port (admin/admin)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus
if kubectl get svc prometheus -n airflow &> /dev/null; then
    prometheus_port=$(kubectl get svc prometheus -n airflow -o jsonpath='{.spec.ports[0].port}')
    echo "üîç Prometheus: kubectl port-forward svc/prometheus $prometheus_port:$prometheus_port -n airflow"
    echo "   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:$prometheus_port"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
echo "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Prometheus –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
if kubectl get pod -l app=prometheus -n airflow &> /dev/null; then
    prometheus_pod=$(kubectl get pod -l app=prometheus -n airflow -o jsonpath='{.items[0].metadata.name}')
    if [ "$prometheus_pod" != "" ]; then
        echo "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫ –≤ Prometheus..."
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
        metrics_check=$(kubectl exec $prometheus_pod -n airflow -- wget -qO- http://localhost:9090/api/v1/label/__name__/values 2>/dev/null | grep -o '"up"' | wc -l)
        if [ "$metrics_check" -gt 0 ]; then
            echo "‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Prometheus"
        else
            echo "‚ö†Ô∏è  –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    fi
fi

echo ""

# –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
echo "8. –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏..."
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ                  –û–¢–õ–ê–î–ö–ê –ò –õ–û–ì–ò                         ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo ""
echo "–õ–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
echo "‚Ä¢ Airflow Webserver:  kubectl logs -f deployment/airflow-webserver -n airflow"
echo "‚Ä¢ Airflow Scheduler:  kubectl logs -f deployment/airflow-scheduler -n airflow"
echo "‚Ä¢ PostgreSQL:         kubectl logs -f deployment/postgres -n airflow"
echo "‚Ä¢ Prometheus:         kubectl logs -f deployment/prometheus -n airflow"
echo "‚Ä¢ Grafana:            kubectl logs -f deployment/grafana -n airflow"
echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
echo "‚Ä¢ ConfigMaps:         kubectl get configmaps -n airflow"
echo "‚Ä¢ Secrets:            kubectl get secrets -n airflow"
echo "‚Ä¢ PVCs:               kubectl get pvc -n airflow"
echo ""
echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤:"
echo "‚Ä¢ Top –ø–æ–¥–æ–≤:          kubectl top pods -n airflow"
echo "‚Ä¢ Top —É–∑–ª–æ–≤:          kubectl top nodes"
echo "‚Ä¢ –°–æ–±—ã—Ç–∏—è:            kubectl get events -n airflow --sort-by='.lastTimestamp'"

echo ""
echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
failed_components=0
for component in "${components[@]}"; do
    if kubectl get deployment $component -n airflow &> /dev/null; then
        ready=$(kubectl get deployment $component -n airflow -o jsonpath='{.status.readyReplicas}')
        desired=$(kubectl get deployment $component -n airflow -o jsonpath='{.spec.replicas}')
        if [ "$ready" != "$desired" ] || [ "$ready" = "" ]; then
            ((failed_components++))
        fi
    else
        ((failed_components++))
    fi
done

if [ $failed_components -eq 0 ]; then
    echo "üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    echo ""
    echo "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "kubectl port-forward svc/airflow-webserver 8080:8080 -n airflow &"
    echo "kubectl port-forward svc/grafana 3000:3000 -n airflow &"
    echo ""
    echo "–ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ:"
    echo "‚Ä¢ Airflow: http://localhost:8080"
    echo "‚Ä¢ Grafana: http://localhost:3000"
else
    echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å $failed_components –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–æ–≤"
fi
